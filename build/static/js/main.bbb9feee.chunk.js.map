{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","postId","user","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","image","setImage","progress","setProgress","setCaption","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","openSignIn","setOpenSignIn","posts","setPosts","open","setOpen","password","setPassword","email","setEmail","setUsername","setUser","onAuthStateChanged","authUser","id","post","Modal","onClose","style","Input","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bbb9feee.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAGs3nt3kQGtg8CrWjpE9wGsbVVuR_vbbQ\",\r\n    authDomain: \"instagram-ef292.firebaseapp.com\",\r\n    databaseURL: \"https://instagram-ef292.firebaseio.com\",\r\n    projectId: \"instagram-ef292\",\r\n    storageBucket: \"instagram-ef292.appspot.com\",\r\n    messagingSenderId: \"452083950019\",\r\n    appId: \"1:452083950019:web:6ee853a3c489d7dc6d9d76\",\r\n    measurementId: \"G-L49TT1SYF6\"\r\n  };\r\nconst firebaseApp =firebase.initializeApp(firebaseConfig);\r\nconst db=firebaseApp.firestore();\r\nconst auth =firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport { db, auth, storage};","import React, {useState,useEffect} from 'react'\r\nimport './Post.css';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { db } from './firebase';\r\nimport firebase from'firebase';\r\n\r\nfunction Post({ postId,user,username ,caption ,imageUrl }) {\r\n\r\n    const [comments,setComments] = useState([]);\r\n    const [comment,setComment]=useState('');\r\n    useEffect(() => {\r\n        let unsubscribe;\r\n        if (postId) {\r\n            unsubscribe =db\r\n            .collection(\"posts\")\r\n            .doc(postId)\r\n            .collection(\"comments\")\r\n            .orderBy('timestamp','desc')\r\n            .onSnapshot((snapshot) =>{\r\n                setComments(snapshot.docs.map((doc) => doc.data()))\r\n        });\r\n    }\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    },[postId]);\r\n\r\n    const postComment=(event) => {\r\n            event.preventDefault();\r\n            db.collection(\"posts\").doc(postId).collection(\"comments\").add({\r\n                text:comment,\r\n                username:user.displayName,\r\n                timestamp:firebase.firestore.FieldValue.serverTimestamp()\r\n            });\r\n            setComment('');\r\n        }\r\n   \r\n   \r\n    return (\r\n        <div className=\"post\">\r\n            <div className=\"post__header\">\r\n                <Avatar\r\n                    className=\"post__avatar\"\r\n                    alt=\"Abhi\"\r\n                    src=\"/static/images/avatar/1.jpg\"\r\n                />\r\n            <h3>{username}</h3>\r\n            </div>\r\n            <img className=\"post__image\" src={imageUrl} alt=\"\"></img>\r\n            <h4 className=\"post__text\"><strong> {username}  </strong>{caption}</h4>\r\n            <div className=\"post__comments\">\r\n            {\r\n                comments.map((comment) =>(\r\n                        <p>\r\n                            <strong>{comment.username} </strong>\r\n                            {comment.text}\r\n                        </p>\r\n\r\n                ))\r\n            }\r\n            </div>\r\n            {user && (\r\n            <form className=\"post__commentBox\">\r\n                <input\r\n                className=\"post__input\"\r\n                type=\"text\"\r\n                placeholder=\"Add comment..\"\r\n                value={comment}\r\n                onChange={(e) => setComment(e.target.value)}\r\n                />\r\n                <button\r\n                className=\"post__button\"\r\n                disabled={!comment}\r\n                type=\"submit\"\r\n                onClick={postComment}\r\n                >Post</button>\r\n            </form>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React,{useState} from 'react'\r\nimport {Button} from \"@material-ui/core\";\r\nimport {storage,db} from './firebase';\r\nimport firebase from 'firebase';\r\nimport './ImageUpload.css';\r\n\r\nfunction ImageUpload({username}) {\r\n    const [image,setImage]=useState(null);\r\n    const [progress,setProgress]=useState(0);\r\n    const  [caption,setCaption]=useState('');\r\n\r\n    const handleChange=(e) => {\r\n        if (e.target.files[0]){\r\n            setImage(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const handleUpload =() => {\r\n        const uploadTask =storage.ref(`images/${image.name}`).put(image);\r\n        uploadTask.on(\r\n            \"state_changed\",\r\n            (snapshot) =>{\r\n                //progress function..\r\n                const progress =Math.round(\r\n                (snapshot.bytesTransferred /snapshot.totalBytes)*100\r\n                );\r\n                setProgress(progress);\r\n            },\r\n            (error)=> {\r\n                //Error Function..\r\n                console.log(error);\r\n                alert(error.message);\r\n            },\r\n            () => {\r\n                //complete function....\r\n                storage\r\n                .ref(\"images\")\r\n                .child(image.name)\r\n                .getDownloadURL()\r\n                .then(url => {\r\n                    //post image..\r\n                    db.collection(\"posts\").add({\r\n                        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                        caption:caption,\r\n                        imageUrl:url,\r\n                        username: username\r\n\r\n                    });\r\n                    setProgress(0);\r\n                    setCaption(\"\");\r\n                    setImage(null);\r\n                });\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"imageUpload\">\r\n            \r\n            <progress className=\"image__progress\" value={progress} max=\"100\"/>\r\n\r\n            <input type=\"text\" placeholder=\"Enter a caption..!\"  onChange={event =>setCaption(event.target.value)} value={caption}/>\r\n\r\n            <input type=\"file\" onChange={handleChange}/>\r\n\r\n            <Button onClick={handleUpload}>\r\n              Upload\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageUpload\r\n","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport Post from './Post';\nimport { db,auth } from './firebase';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport { Button,Input } from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\nimport InstagramEmbed from 'react-instagram-embed';\n\nfunction getModalStyle(){\n  const top =50;\n  const left =50;\n\n  return {\n    top:`${top}%`,\n    left:`${left}%`,\n    transform:`translate(-${top}%,-${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme)=>({\n  paper:{\n    position:'absolute',\n    width:400,\n    backgroundColor:theme.palette.background.paper,\n    border:'2px solid #000',\n    boxShadow:theme.shadows[5],\n    padding:theme.spacing(2,4,3),\n  },\n}));\n\nfunction App(){\n  const classes=useStyles();\n  const [modalStyle]=useState(getModalStyle);\n  const [openSignIn,setOpenSignIn]=useState(false);\n  const [posts, setPosts] = useState([]);\n  const [open,setOpen] =useState(false);\n  const [password,setPassword] =useState('');\n  const [email,setEmail] =useState('');\n  const [username,setUsername] =useState('');\n  const [user,setUser] =useState(null);\n\n  //USE Effect-> Runs a peice of code based on a specific condition\n  useEffect(()=>{\n    const unsubscribe = auth.onAuthStateChanged((authUser) =>{\n      if (authUser){\n        //logged in\n        console.log(authUser);\n        setUser(authUser);\n        \n      }else{\n        //logged out\n        setUser(null);\n      }\n    })\n    return()=>{\n      //perform some cleanup\n      unsubscribe();\n    }\n  },[user,username]);\n\n  useEffect(() => {\n    db.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot => {\n      setPosts(snapshot.docs.map(doc => ({\n        id:doc.id,\n        post:doc.data()\n      })));\n    })\n  },[]);\n\n  const signUp =(event)=> {\n      event.preventDefault();\n\n      auth\n      .createUserWithEmailAndPassword(email,password)\n      .then((authUser)=>{\n        return authUser.user.updateProfile({\n          displayName: username\n        })\n      })\n      .catch((error)=>alert(error.message))\n\n      setOpen(false);\n  }\n\n  const signIn=(event) =>{\n    event.preventDefault();\n\n    auth\n    .signInWithEmailAndPassword(email,password)\n    .catch((error) =>alert(error.message));\n\n    setOpenSignIn(false);\n  }\n\n  return(\n    <div className=\"app\">\n      <Modal\n        open={open}\n        onClose={()=> setOpen(false)}\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n              <center>\n              <img\n                  className=\"app__headerImage\"\n                  src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\" alt=\"\"/>\n              </center> \n              <Input\n                placeholder=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e)=> setUsername(e.target.value)}\n                />\n              <Input\n                placeholder=\"email\"\n                type=\"text\"\n                value={email}\n                onChange={(e)=> setEmail(e.target.value)}\n                />\n                <Input\n                placeholder=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e)=> setPassword(e.target.value)}\n                />\n                <Button type=\"submit\" onClick={signUp}>Login</Button>\n          </form>\n      </div>\n      </Modal>\n      <Modal\n        open={openSignIn}\n        onClose={()=> setOpenSignIn(false)}\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n              <center>\n              <img\n                  className=\"app__headerImage\"\n                  src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\" alt=\"\"/>\n              </center> \n            \n              <Input\n                placeholder=\"email\"\n                type=\"text\"\n                value={email}\n                onChange={(e)=> setEmail(e.target.value)}\n                />\n                <Input\n                placeholder=\"password\" \n                type=\"password\"\n                value={password}\n                onChange={(e)=> setPassword(e.target.value)}\n                />\n                <Button type=\"submit\" onClick={signIn}>Sign In</Button>\n          </form>\n       </div>\n      </Modal>\n      <div className=\"app__header\">\n        <img\n            className=\"app__headerImage\"\n            src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\" alt=\"\"/>\n\n      {user ?(\n        <Button onClick={() => auth.signOut()}>Logout</Button>\n      ):(\n        <div className=\"app__loginContainer\">\n          <Button onClick={() => setOpenSignIn(true)}>Sign In</Button>\n          <Button onClick={() => setOpen(true)}>Sign Up</Button>\n        </div>\n      )}\n      </div>\n      <div className=\"app__posts\">\n        <div className=\"app__postsLeft\">\n            {\n              posts.map(({id,post}) =>(\n              <Post key={id} postId={id} user={user} username={post.username} caption={post.caption} imageUrl={post.imageUrl} />\n              ))\n            }\n        </div>\n        <div className=\"app__postsRight\">\n            <InstagramEmbed\n            url='https://www.instagram.com/p/B_uf9dmAGPw/'\n            maxWidth={320}\n            hideCaption={false}\n            containerTagName='div'\n            protocol=''\n            injectScript\n            onLoading={() => {}}\n            onSuccess={() => {}}\n            onAfterRender={() => {}}\n            onFailure={() => {}}\n            />\n        </div>\n      \n      </div>\n      \n\n      {user?.displayName ?(\n        <ImageUpload username={user.displayName}/>\n      ):(\n        <h3>Sorry you need to login to upload</h3>\n      )}\n\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}